name: Build and Deploy Custom Image on PR Merge
 
on:
  pull_request:
    types:
      - closed
 
jobs:
  build_and_test:
    name: Zip and Upload Web Application & Create Custom AMI
    if: github.event.pull_request.merged == true  # Run only if the PR was merged
    runs-on: ubuntu-latest
    env:
            DB_USERNAME: ${{ secrets.DB_USERNAME }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_DATABASE: ${{ secrets.DB_DATABASE }}

    strategy:
      matrix:
        node-version: [20.x]

 
    steps:
    # Step 1: Check out the code
    - name: Check out code
      uses: actions/checkout@v3
 
    # Step 2: Set up Node.js version
    - name: Set up Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
 
    - name: Zip application code
      run: |
        zip -r webapp.zip .

    # Step 4: Upload the artifact
    - name: Upload webapp artifact
      uses: actions/upload-artifact@v3
      with:
        name: webapp
        path: webapp.zip
 
    # Step 5: Download the artifact (webapp.zip)
    - name: Download webapp artifact
      uses: actions/download-artifact@v3
      with:
        name: webapp
        path: /opt/

    - name: Install PostgreSQL and related packages
      run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo systemctl start postgresql
          sudo systemctl enable postgresql
  
    - name: Create PostgreSQL user and database
      run: |
          sudo -u postgres psql -c "CREATE USER $DB_USERNAME WITH PASSWORD '$DB_PASSWORD';" 2>/dev/null
          sudo -u postgres psql -c "CREATE DATABASE $DB_DATABASE OWNER $DB_USERNAME;" 2>/dev/null
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_DATABASE TO $DB_USERNAME;" 2>/dev/null
          sudo mkdir -p /var/log/webapp 2>/dev/null
  
  
      # Step 6: Set environment variables for the application
    - name: Set environment variables for the application
      run: |
          mkdir -p /opt/webapp/src  # Ensure the directory exists
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> ./src/.env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> ./src/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ./src/.env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> ./src/.env
          echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> ./src/.env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> ./src/.env
   
      # Step 7: Install Dependencies
    - name: Install Dependencies
      run: npm ci
   
      # Step 8: Run the tests
 
 
 
    # Step 10: Install Packer
    - name: Install Packer
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install -y packer
 
    # Step 12: AWS configure
    - name: Configure AWS dev profile credentials
      env:
        AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
      if: env.AWS_PROFILE == 'dev'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      
    - name: Configure AWS dev profile credentials
      env:
        AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
      if: env.AWS_PROFILE == 'demo'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWSDEMO_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWSDEMO_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
 
    # Step 13: Initialize Packer
    - name: Initialize Packer
      run: |
        packer init .
    
    # Step 12: Format Packer
    - name: Format Packer
      run: |
        packer fmt .
 
    # Step 14: Build Custom Image with Packer
    - name: Build Custom Image
      env:
        aws_vpc_id: ${{ secrets.AWS_VPC_ID }}
        aws_subnet_id: ${{ secrets.AWS_SUBNET_ID }}
        aws_profile: ${{ secrets.AWS_PROFILE }}
        aws_region: ${{ secrets.AWS_REGION }}
        aws_instance_type: ${{ secrets.AWS_INSTANCE_TYPE }}
        aws_source_ami: ${{ secrets.AWS_SOURCE_AMI }}
        volume_size: ${{ secrets.VOLUME_SIZE }}
        artifact_path: /opt/webapp.zip
        aws_ami_name: ${{ secrets.AWS_AMI_NAME }}
        service_name: ${{ secrets.AWS_SERVICE_NAME }}

      run: |
        packer build -var "aws_vpc_id=${aws_vpc_id}" \
                     -var "aws_subnet_id=${aws_subnet_id}" \
                     -var "aws_instance_type=${aws_instance_type}" \
                     -var "aws_profile=${aws_profile}" \
                     -var "aws_region=${aws_region}" \
                     -var "aws_source_ami=${aws_source_ami}" \
                     -var "aws_ami_name=${aws_ami_name}" \
                     -var "volume_size=${volume_size}" \
                     -var "artifact_path=${artifact_path}" \
                     -var "service_name=${service_name}" \
                     .
 
 
    - name: Update Launch Template
      run: |
        
        asg_name=$(aws autoscaling describe-auto-scaling-groups \
          --query "AutoScalingGroups | sort_by(@, &AutoScalingGroupARN)[-1].AutoScalingGroupName" \
          --output text)
        echo "Latest Auto Scaling Group Name: $asg_name"
 
        launch_template_id=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $asg_name \
          --query "AutoScalingGroups[0].LaunchTemplate.LaunchTemplateId" \
          --output text)
        echo "Launch Template ID: $launch_template_id"
 
        latest_ami=$(aws ec2 describe-images \
          --owners self \
          --filters "Name=state,Values=available" \
          --query "reverse(sort_by(Images, &CreationDate))[0].ImageId" \
          --output text)
        echo "Latest AMI ID: $latest_ami"

        if [ -z "$latest_ami" ] || [ "$latest_ami" == "None" ]; then
          echo "No valid AMI found. Exiting."
          exit 1
        fi

        latest_version=$(aws ec2 describe-launch-template-versions \
          --launch-template-id $launch_template_id \
          --query 'LaunchTemplateVersions[-1].VersionNumber' \
          --output text)
        echo "Current Latest Launch Template Version: $latest_version"

        aws ec2 create-launch-template-version \
          --launch-template-id $launch_template_id \
          --source-version $latest_version \
          --launch-template-data '{"ImageId":"'"$latest_ami"'"}'

        new_version=$(aws ec2 describe-launch-templates \
          --launch-template-ids $launch_template_id \
          --query 'LaunchTemplates[0].LatestVersionNumber' --output text)
        echo "New Launch Template Version: $new_version"

        aws ec2 modify-launch-template \
          --launch-template-id $launch_template_id \
          --default-version $new_version
        echo "Updated default launch template version to: $new_version"

    # Step 13: Refresh Auto Scaling Group
    - name: Refresh Auto Scaling Group
      run: |
        asg_name=$(aws autoscaling describe-auto-scaling-groups \
          --query "AutoScalingGroups | sort_by(@, &AutoScalingGroupARN)[-1].AutoScalingGroupName" \
          --output text)
        echo "Latest Auto Scaling Group Name: $asg_name"

        refresh_id=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $asg_name \
          --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' \
          --query 'InstanceRefreshId' --output text)
        echo "Instance Refresh ID: $refresh_id"

        while true; do
          refresh_status=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $asg_name \
            --query "InstanceRefreshes[?InstanceRefreshId=='$refresh_id'].Status" \
            --output text)
          echo "Instance Refresh Status: $refresh_status"

          if [ "$refresh_status" == "Successful" ]; then
            echo "Instance refresh completed successfully."
            break
          elif [ "$refresh_status" == "Failed" ]; then
            echo "Instance refresh failed."
            exit 1
          elif [ "$refresh_status" == "Cancelled" ]; then
            echo "Instance refresh was cancelled."
            exit 1
          else
            echo "Instance refresh in progress. Waiting..."
            sleep 30
          fi
        done